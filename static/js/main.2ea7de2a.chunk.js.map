{"version":3,"sources":["logo.svg","Components/LangWrapper/LangWrapper.js","Components/LangSelector/LangSelector.tsx","App.js","reportWebVitals.js","index.js"],"names":["LangContext","React","createContext","local","navigator","language","lang","en","hindi","tel","LangWrapper","props","useState","locale","setLocale","messages","setMessages","Provider","value","selectLangFunc","e","newLocale","target","children","LangSelector","context","useContext","onChange","App","className","src","logo","alt","id","defaultMessage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","date","Date","now","document","getElementById"],"mappings":"4bAAe,G,MAAA,IAA0B,kC,uDCM5BA,EAAcC,IAAMC,gBAE3BC,EAAQC,UAAUC,SAEpBC,EAAOC,EAEVD,EADa,UAAVH,EACIK,EAEO,WAAVL,EAA2BM,EACnBF,EAGb,IAwBeG,EAxBK,SAACC,GACpB,MAA4BC,mBAAST,GAArC,mBAAOU,EAAP,KAAeC,EAAf,KACA,EAAgCF,mBAASN,GAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KAaA,OACC,cAAChB,EAAYiB,SAAb,CAAsBC,MAAO,CAAEL,SAAQM,eAZxC,SAAwBC,GACvB,IAAMC,EAAYD,EAAEE,OAAOJ,MAC3BJ,EAAUO,GAETL,EADiB,UAAdK,EACSb,EAEM,WAAda,EAAoCZ,EACvBF,KAKlB,SACC,cAAC,IAAD,CAAcQ,SAAUA,EAAUF,OAAQA,EAA1C,SACEF,EAAMY,cCpBIC,MAbf,WACI,IAAMC,EAAUC,qBAAW1B,GAC3B,OACI,8BACA,yBAAQkB,MAAOO,EAAQZ,OAAQc,SAAUF,EAAQN,eAAjD,UACI,wBAAQD,MAAM,KAAd,qBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,SAAd,0B,QCUGU,MAdf,WACC,OACC,qBAAKC,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UACC,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,cAAC,EAAD,IACA,6BACC,cAAC,IAAD,CAAkBC,GAAG,YAAYC,eAAe,qBCDtCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACR,cAAC,EAAD,UACC,cAAC,EAAD,CAAKC,KAAMC,KAAKC,QAEjBC,SAASC,eAAe,SAMzBf,M","file":"static/js/main.2ea7de2a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from \"react\";\r\nimport { IntlProvider } from \"react-intl\";\r\nimport en from \"../../languages/english.json\";\r\nimport tel from \"../../languages/telugu.json\";\r\nimport hindi from \"../../languages/hindi.json\";\r\n\r\nexport const LangContext = React.createContext();\r\n\r\nconst local = navigator.language;\r\n\r\nlet lang = en;\r\nif (local === \"hindi\") {\r\n\tlang = hindi;\r\n} else {\r\n\tif (local === \"telugu\") lang = tel;\r\n\telse lang = en;\r\n}\r\n\r\nconst LangWrapper = (props) => {\r\n\tconst [locale, setLocale] = useState(local);\r\n\tconst [messages, setMessages] = useState(lang);\r\n\r\n\tfunction selectLangFunc(e) {\r\n\t\tconst newLocale = e.target.value;\r\n\t\tsetLocale(newLocale);\r\n\t\tif (newLocale === \"hindi\") {\r\n\t\t\tsetMessages(hindi);\r\n\t\t} else {\r\n\t\t\tif (newLocale === \"telugu\") setMessages(tel);\r\n\t\t\telse setMessages(en);\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<LangContext.Provider value={{ locale, selectLangFunc }}>\r\n\t\t\t<IntlProvider messages={messages} locale={locale}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</IntlProvider>\r\n\t\t</LangContext.Provider>\r\n\t);\r\n};\r\n\r\nexport default LangWrapper;\r\n","import React, {useContext} from 'react'\r\nimport {LangContext} from \"../LangWrapper/LangWrapper\"\r\n\r\nfunction LangSelector() {\r\n    const context = useContext(LangContext);\r\n    return (\r\n        <div>\r\n        <select value={context.locale} onChange={context.selectLangFunc}>\r\n            <option value=\"en\">English</option>\r\n            <option value=\"hindi\">Hindi</option>\r\n            <option value=\"telugu\">Telugu</option>\r\n        </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LangSelector\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport LangSelector from \"./Components/LangSelector/LangSelector\";\nimport { FormattedMessage } from \"react-intl\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<LangSelector />\n\t\t\t\t<h1>\n\t\t\t\t\t<FormattedMessage id=\"app.title\" defaultMessage=\"AmarVeda\" />\n\t\t\t\t</h1>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport LangWrapper from \"./Components/LangWrapper/LangWrapper\";\n\nReactDOM.render(\n\t<LangWrapper>\n\t\t<App date={Date.now} />\n\t</LangWrapper>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}